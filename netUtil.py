#
# Copyright (c) 2015 Nutanix Inc. All rights reserved.
#
# Author: cui@nutanix.com
#
# This module contains functions for configuring networks.
#
import os

def write_ifcfg(iface, vswitches, path_prefix=".", is_ovs=False):
  """
  Given JSON dicts iface and list of switch configurations, generate ifcfg file.

  iface: dict representing either a CVM or host interface.
  vswitches: list of vswitches
  """
  with open(path_prefix + "/etc/sysconfig/network-scripts/ifcfg-" +
            iface["name"], "w") as outfile:
    outfile.write("# Auto generated by phoenix\n"
                  "DEVICE=%(name)s\n"
                  "NM_CONTROLLED=no\n"
                  "ONBOOT=yes\n" % iface)

    if is_ovs:
      outfile.write("TYPE=OVSIntPort\n"
                    "DEVICETYPE=ovs\n")
    else:
      outfile.write("TYPE=Ethernet\n")

    if iface.get("ip") == "dhcp":
      outfile.write("BOOTPROTO=dhcp\n")
    else:
      outfile.write("BOOTPROTO=none\n")
      if iface.get("ip"):
        outfile.write("IPADDR=%(ip)s\n"
                      "NETMASK=%(netmask)s\n" % iface)
        if iface.get("gateway"):
          outfile.write("GATEWAY=%(gateway)s\n" % iface)

    # Lookup MTU in vswitches.
    mtu = None
    for vs in vswitches:
      if vs["name"] == iface["vswitch"]:
        mtu = vs.get("mtu")
        break
    if mtu is not None:
      outfile.write("MTU=%d\n" % mtu)

def get_mac_addr(netdev):
  """
  Returns the mac address of the network device
  """
  base = "/sys/class/net"
  pcibase = "/sys/devices/pci"

  path = os.path.realpath(os.path.join(base, netdev))
  if not path.startswith(pcibase):
    # Not a valid pci device
    return None

  # When phoenix is using lacp bonding all NICs display same MAC address.
  # This is the way to work around that to get the real mac address.
  bonded_nic_path = os.path.join(path, "bonding_slave/perm_hwaddr")
  if os.path.exists(bonded_nic_path):
    mac_addr = open(bonded_nic_path).read().strip()
  else:
    mac_addr = open(os.path.join(path, "address")).read().strip()
  return mac_addr

def get_netdev_from_bus_addr(bus_addr):
  """
  Return netdev eg.eth0 from pci addr eg: 86:00.0
  """

  base = "/sys/class/net"
  for netdev in os.listdir(base):
    path = os.path.realpath(os.path.join(base, netdev))
    if not path.startswith("/sys/devices/pci"):
      continue
    if bus_addr in path:
      return netdev
  return None
